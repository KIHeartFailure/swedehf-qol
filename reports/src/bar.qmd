
```{r}
#| label: fig-barplot
#| cache: true
#| cache.comments: false
#| fig-cap: "QoL by EF"

figdata <- rsdata %>%
  group_by(shf_ef_cat, .drop = F) %>%
  count(shf_qol_cat) %>%
  mutate(
    p = n / sum(n) * 100
  ) %>%
  ungroup()

p <- ggplot(figdata, aes(x = shf_ef_cat, y = p, fill = shf_qol_cat)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = global_cols[4:1]) +
  scale_y_continuous(limits = c(0, 100)) +
  theme_classic() +
  theme(
    text = element_text(size = 27, face = "bold"),
    legend.position = "bottom",
    legend.box = "vertical",
    axis.text = element_text(color = "black"),
    axis.title.x = element_blank()
  ) +
  labs(y = "Proportion (%)", fill = "QoL") +
  geom_text(aes(label = fn(p, dec = 0)), position = position_dodge(width = 0.9), vjust = -0.25, size = 8, fontface = "bold")

create_pptx(p)
p
```

```{r}
#| label: fig-doughnut
#| cache: true
#| cache.comments: false
#| fig-cap: "QoL by EF (alternative to barchart above, don't use both!)"
#| fig-height: 6
#| fig-width: 6

lvl0 <- tibble(name = "", n = 0, level = 0, fill = NA, lab = NA)

lvl1 <- rsdata %>%
  count(shf_ef_cat) %>%
  mutate(
    p = n / sum(n) * 100,
    lab = paste0(shf_ef_cat, " ", fn(p, 0), "%")
  ) %>%
  mutate(
    level = 1,
    fill = shf_ef_cat
  ) %>%
  rename(name = shf_ef_cat)

lvl2 <- rsdata %>%
  group_by(shf_ef_cat) %>%
  count(shf_qol_cat) %>%
  mutate(
    p = n / sum(n) * 100,
    lab2 = paste0(shf_qol_cat, "\n", fn(p, 0), "%")
  ) %>%
  ungroup() %>%
  arrange(shf_ef_cat, desc(shf_qol_cat)) %>%
  mutate(
    level = 2,
    fill = shf_ef_cat,
    pos = (sum(n) - cumsum(n)) + n / 2
  ) %>%
  arrange(shf_ef_cat, shf_qol_cat) %>%
  rename(name = shf_qol_cat)

piedata <- bind_rows(lvl0, lvl1, lvl2) %>%
  mutate(
    level = as.factor(level),
    name = forcats::fct_inorder(name)
  )

p <- piedata %>%
  ggplot(aes(x = level, y = n, fill = fill, alpha = level)) +
  geom_col(width = 1, color = "white", position = position_stack()) +
  geom_text(aes(label = lab), size = 4.5, fontface = "bold", position = position_stack(vjust = 0.5)) +
  geom_text_repel(aes(y = pos, label = lab2),
    size = 4.5, show.legend = FALSE, vjust = 0.5, nudge_x = 0.8, hjust = 0.5, fontface = "bold", alpha = 1
  ) +
  coord_polar(theta = "y", start = 0, direction = 1) +
  scale_alpha_manual(values = c("0" = 0, "1" = 1, "2" = 0.7)) +
  scale_x_discrete(breaks = NULL) +
  scale_y_continuous(breaks = NULL) +
  scale_fill_brewer(palette = "Set1", na.translate = F) +
  theme_void() +
  theme(
    legend.position = "none"
  )

create_pptx(p, width = 6, height = 6)
p
```

```{r}
#| label: violinplotfunc
#| cache: true
#| cache.comments: false

violinplotfunc <- function(var, vals = NULL) {
  if (is.null(vals)) {
    vals <- levels(rsdata %>% pull(!!sym(var)))
  }

  p <- ggplot(rsdata %>% filter(!is.na(!!sym(var))), aes(x = shf_ef_cat, y = shf_qol, fill = !!sym(var))) +
    geom_hline(yintercept = 0, linetype = "dashed", color = "grey", linewidth = 0.6) +
    geom_hline(yintercept = 25, linetype = "dashed", color = "grey", linewidth = 0.6) +
    geom_hline(yintercept = 50, linetype = "dashed", color = "grey", linewidth = 0.6) +
    geom_hline(yintercept = 75, linetype = "dashed", color = "grey", linewidth = 0.6) +
    geom_hline(yintercept = 100, linetype = "dashed", color = "grey", linewidth = 0.6) +
    geom_split_violin(trim = TRUE) +
    geom_boxplot(width = 0.25, notch = FALSE, notchwidth = .4, outlier.shape = NA, coef = 0) +
    scale_fill_manual(
      values = global_cols[2:3],
      labels = vals,
      guide = guide_legend(override.aes = list(color = global_cols[2:3]))
    ) +
    # coord_cartesian(ylim = c(0, 100)) +
    theme_classic() +
    theme(
      text = element_text(size = 27, face = "bold"),
      axis.text = element_text(color = "black"),
      legend.position = "bottom",
      legend.title = element_blank(),
      axis.title.x = element_blank()
    ) +
    labs(y = "QoL")

  create_pptx(p)
  p
}
```

```{r}
#| label: fig-violinplot
#| cache: true
#| cache.comments: false
#| dependson: violinplotfunc
#| fig-cap: "QoL by EF and sex"
#| fig-subcap: ["Sex", "Age", "Location", "Duration HF", "NYHA", "Income"]
#| layout-ncol: 2
#| layout-nrow: 3

violinplotfunc("shf_sex")

violinplotfunc("shf_age_cat", vals = c("Age \u226475 years", "Age >75 years"))

violinplotfunc("shf_location")

violinplotfunc("shf_durationhf", vals = c("HF duration <6 months", "HF duration \u22656 months"))

violinplotfunc("shf_nyha_cat", vals = c("NYHA I-II", "NYHA III-IV"))

violinplotfunc("scb_dispincome_cat", vals = c("Income below median", "Income above median"))
```
